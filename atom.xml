<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[遇见最美的自己]]></title>
  <subtitle><![CDATA[You know I love you]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com//"/>
  <updated>2015-08-04T08:11:19.000Z</updated>
  <id>http://yoursite.com//</id>
  
  <author>
    <name><![CDATA[YanceyWang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Ubuntu下为软件创建快捷方式]]></title>
    <link href="http://yoursite.com/2015/08/04/Ubuntu%E4%B8%8B%E4%B8%BA%E8%BD%AF%E4%BB%B6%E5%88%9B%E5%BB%BA%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/08/04/Ubuntu下为软件创建快捷方式/</id>
    <published>2015-08-04T07:58:22.000Z</published>
    <updated>2015-08-04T08:11:19.000Z</updated>
    <content type="html"><![CDATA[<p>ubuntu/linux mint上有很多软件的安装不是直接通过APT管理器从仓库中安装的,这样就会有一个问题,我们启动软件的时候只能在软件的目录通过命令启动,典型的例子是eclipse软件,我们是直接下载软件包,然后解压点击eclipse或命令行输入eclipse运行的.这样使用起来不太方便,今天就介绍一种方法,可以为这些不是通过APT安装的软件创建快捷方式,在dash中可以直接启动.</p>
<p>我用的是Linux mint 发行版,所以就以这个版本为基础进行演示.其实ubuntu的操作是一样的.</p>
<h2 id="所有的快捷方式都是-desktop文件">所有的快捷方式都是.desktop文件</h2><p>其实我们看到的在桌面上或dash中的软件图标都是.desktop的文件,例如我们用terminal进入desktop:<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wyq@wyq-m81 ~/Desktop $ ls</span><br><span class="line">CmdMarkdown.desktop  eclipse.desktop  goagent-gtk.desktop  google-chrome-unstable.desktop  jetbrains-studio.desktop  meld.desktop  shadowsocks-qt5.desktop  skype.desktop  SmartcardService  virtualbox.desktop</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>可以很清楚的看到这些快捷图标都是.desktop文件,那这些文件存在哪呢.<br>有两个地方:</p>
<blockquote>
<ul>
<li>~/.local/share/applications/  #存放只有当前用户会看到的桌面快捷方式</li>
<li>/usr/share/applications/      #存放所有用户都可以看到的桌面快捷方式图片一般sudo apt 安装的都在这</li>
</ul>
</blockquote>
<p>既然是文件,免不了被编辑的命运,我们用vim打开其中一个看看.这里以android studio的快捷方式为例:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Version=<span class="number">1.0</span>                              <span class="comment">//软件版本</span></span><br><span class="line">Type=Application                         <span class="comment">//类型,目前我所知的就是Application 和Directory</span></span><br><span class="line">Name=Android Studio                      <span class="comment">//名称</span></span><br><span class="line">Icon=<span class="regexp">/home/</span>wyq/Downloads/android-studio/bin/studio.png   <span class="comment">//快捷方式的图标</span></span><br><span class="line">Exec=<span class="string">"/home/wyq/Downloads/android-studio/bin/studio.sh"</span> %f  <span class="comment">//执行命令,命令行怎么启动,这边就怎么写</span></span><br><span class="line">Comment=Develop <span class="keyword">with</span> pleasure!                  <span class="comment">//鼠标放在快捷方式上显示的字</span></span><br><span class="line">Categories=Development;IDE;                    <span class="comment">//这个软件的类别,之后在dash中会显示在Development类别下</span></span><br><span class="line">Terminal=<span class="literal">false</span>                              <span class="comment">//是否在终端启动</span></span><br><span class="line">StartupWMClass=jetbrains-studio              <span class="comment">//主要是为了避免启动多个android                                 studio的时候在launcher出现多个androidstudio 图标</span></span><br></pre></td></tr></table></figure></p>
<p>oK,看完这个,我们写出自己的一个快捷方式应该很简单了.这边以cmdmarkdown为例:<br>cmdMarkdown 的linux版本没有在包仓库中,官方给的是压缩包,解压后命令行运行就可以了:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wyq@wyq-m81 ~ $ cd cmd_markdown_linux64/&#10;wyq@wyq-m81 ~/cmd_markdown_linux64 $ ls&#10;CmdMarkdown  icudtl.dat  images.jpg  images.png  libffmpegsumo.so  locales  nw.pak&#10;wyq@wyq-m81 ~/cmd_markdown_linux64 $ ./CmdMarkdown</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog03cmd_dir.png" alt="cmd_dir"><br>图中1是为快捷方式准备的图标.2是cmdmarkdwon程序<br>我要为他创建桌面快捷方式.</p>
<ol>
<li><p>在/usr/share/applications中创建CmdMarkdown.desktop的文件:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/applications&#10;touch CmdMarkdown.desktop&#10;sudo vim CmdMarkdown.desktop</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑desktop,写入执行命令和图标</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-<span class="number">8</span></span><br><span class="line">Name=CmdMarkdwon</span><br><span class="line">Comment=CmdMarkdwon</span><br><span class="line">Exec=<span class="regexp">/home/</span>wyq/cmd_markdown_linux64/CmdMarkdown        <span class="comment">//打开的命令</span></span><br><span class="line">Icon=<span class="regexp">/home/</span>wyq/cmd_markdown_linux64/images.png        <span class="comment">//图标</span></span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">StartupNotify=<span class="literal">true</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;Office                      <span class="comment">//程序在哪个分类下出现</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>3.查看dash,并将快捷方式加入到桌面<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp CmdMarkdown.desktop ~/Desktop   //&#25335;&#36125;&#21040;&#26700;&#38754;</span><br></pre></td></tr></table></figure></p>
<p>在dash中查看:<br>按super(也就是win键)键.在office分类下能看到CmdMarkdown啦<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog03md.png" alt="menu"><br>在桌面上:<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog03desktop.png" alt="Desktop"></p>
<p><strong>大功告成</strong></p>
<blockquote>
<p>其实desktop entry 更详细的用法请看<a href="http://standards.freedesktop.org/desktop-entry-spec/latest/" target="_blank" rel="external">这里</a>是他的Spec,上面的几个key 已经足够我使用了.并且,有了这个方法我们就可以随意为软件创建快捷方式了.</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>ubuntu/linux mint上有很多软件的安装不是直接通过APT管理器从仓库中安装的,这样就会有一个问题,我们启动软件的时候只能在软件的目录通过命令启动,典型的例子是eclipse软件,我们是直接下载软件包,然后解压点击eclipse或命令行输入eclipse运行的.这样使用起来不太方便,今天就介绍一种方法,可以为这些不是通过APT安装的软件创建快捷方式,在dash中可以直接启动.</p>
<p>我用的是Linux mint 发行版,所以就以这个版本为基础进行演示.其实ubuntu的操作是一样的.</p>
<h2 id="所有的快捷方式都是-desktop文件">所有的快捷方式都是.desktop文件</h2><p>其实我们看到的在桌面上或dash中的软件图标都是.desktop的文件,例如我们用terminal进入desktop:<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wyq@wyq-m81 ~/Desktop $ ls</span><br><span class="line">CmdMarkdown.desktop  eclipse.desktop  goagent-gtk.desktop  google-chrome-unstable.desktop  jetbrains-studio.desktop  meld.desktop  shadowsocks-qt5.desktop  skype.desktop  SmartcardService  virtualbox.desktop</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="快捷方式" scheme="http://yoursite.com/tags/%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[猴子也能看懂的UEFI下Win8+Ubuntu双系统安装(Lenovo xiaoxin V4000)]]></title>
    <link href="http://yoursite.com/2015/08/04/win8%E5%AE%89%E8%A3%85ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2015/08/04/win8安装ubuntu双系统/</id>
    <published>2015-08-04T06:30:26.000Z</published>
    <updated>2015-08-04T06:40:15.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p> <strong>前言</strong><br>上次在公司搭建好了博客，想着回家在win8上花几分钟搭建环境，当晚发第一篇，结果没想到习惯了linux后在win8上进行工作感觉寸步难行。所以干脆在家的电脑上也给装上了Ubuntu，今天记录下安装双系统的过程以及一些自己的总结。</p>
</blockquote>
<h2 id="让人烦躁却不得不知道的术语"><strong>让人烦躁却不得不知道的术语</strong></h2><p><strong>首先要明白,当我们按下电脑的开机键后,电脑在启动系统之前最先执行的一段程序是放在主板上的只读程序段名字叫Firmware,至于具体电脑的寄存器是怎么复位的,寄存器是怎么寻址到Firmware的,请看知乎大神的<a href="http://www.zhihu.com/question/22364502" target="_blank" rel="external">回答</a>. 我们只需要知道有这段程序,并且在启动系统前会走这段路程就足够了. 目前有两种类型的Firmware,一种是我们以前经常听到的 BIOS(发音:/ˈbaɪ.ɒs/),,那还有一种就是近几年兴起的用来代替BIOS的UEFI发音(pronounced as an initialism U-E-F-I or like “unify” without the n[a])),当我们按下电脑开机键后,电脑厂商的LOGO出来的时候狂按(F2|F12|F9|del 具体各个厂商不一样,我的联想小新就是F2)键就能进入到Firmware控制界面(Firmware setup utility,),接下来我们就看下这两种Firmware</strong></p>
<h3 id="BIOS与UEFI">BIOS与UEFI</h3><p>BIOS的启动方式是通过读取执行硬盘第一个扇区的代码,之后通过这段代码定位并且执行别的代码.由于BIOS的空间限制并且BIOS只能执行16bit的代码,BIOS在使用中有很多限制.相反的,UEFI 通过加载硬盘ESP分区上的efi文件来启动系统,EFI 启动加载器程序可以利用EFI 启动服务来做很多事情,例如从硬盘读取文件.</p>
<h3 id="Secure_Boot"><span id="secureboot">Secure Boot</span></h3><p>Secure Boot只是UEFI的一个部分。两者的关系是局部与整体的关系。<br>Secure Boot的目的，是防止恶意软件侵入。它的做法就是采用密钥。UEFI规定，主板出厂的时候，可以内置一些可靠的公钥。然后，任何想要在这块主板上加载的操作系统或者硬件驱动程序，都必须通过这些公钥的认证。也就是说，这些软件必须用对应的私钥签署过，否则主板拒绝加载。由于恶意软件不可能通过认证，因此就没有办法感染Boot。<br>这个设想是好的。但是，UEFI没规定哪些公钥是可靠的，也没规定谁负责颁发这些公钥，都留给硬件厂商自己决定。<br>现在，微软就是要求，主板厂商内置Windows 8的公钥。</p>
<a id="more"></a>
<h3 id="MBR与GPT">MBR与GPT</h3><p>我们在装系统的时候有时可能会遇到这种问题:<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02installError.jpg" alt="installError"><br><strong>Windows无法安装到这个磁盘。选中的磁盘具有MBR分区表。在EFI系统上，Windows只能安装到GPT磁盘</strong><br>这句话的意思是说,你的磁盘以前是按着MBR方式分区的,现在你在UEFI启动方式上,想安装系统在这个磁盘上就必须将磁盘重新按照GPT方式分区.也就是说不同的启动方式,要对应不同的分区方式,系统才能正常安装.那什么是MBR什么是GPT?</p>
<p>MBR和GPT是两种不同的存储磁盘分区信息方式,这些信息包括每个分区的起至位置,这样你的操作系统就知道哪个扇区属于哪个分区,以及哪个分区是可以启动的.MBR 使用的是传统的BIOS 分区表,GPT使用的是UEFI分区表.MBR的限制在于磁盘只能有四个主分区.并且主打只支持2T的容量.而GPT完全没有这些限制.</p>
<p>那怎么知道现在的磁盘是什么方式分区的以及怎么选择分区方式呢?<br>这个很简单,我们用DiskGenus查看磁盘分区的时候,在菜单栏有选项,如果当前是按MBR分区,那么会出现<code>将磁盘分区转换为GPT分区</code>的选项,如果是按GPT分区的,那么<code>将磁盘分区转换为MBR分区</code>是可选的.同时,我们在对磁盘进行分区的时候可以选择分区方式,例如我要将磁盘按GPT方式分区:<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02DiskDeniusPartition.jpg" alt="GPT分区"><br>可以看到DG工具会提示我们创建ESP分区和MSR分区.这两个分区是UEFI启动方式中非常重要的分区.</p>
<blockquote>
<p>MSR分区（Microsoft Reserved Partition，缩写MSR）即Microsoft 保留 (MSR) 分区。是每个 在GUID 分区表 (GPT) 上的 Windows操作系统（windows7以上）都要求的分区。<br>系统组件可以将 MSR 分区的部分分配到新的分区以供它们使用。例如，将基本 GPT 磁盘转换为动态磁盘后，系统分配的 MSR 分区将被用作“逻辑磁盘管理器”(LDM) 元数据分区。</p>
<p>ESP是一个独立于操作系统之外的分区，操作系统被引导之后，就不再依赖它。这使得 ESP 非常适合用来存储那些系统级的维护性的工具和数据，比如：引导管理程序、驱动程序、系统维护工具、系统备份等，甚至可以在 ESP 里安装一个特殊的操作系统（SlaTaz Linux? PuppyLinux? Win PE?）。</p>
</blockquote>
<p>在我的联想电脑上利用DG查看磁盘分区:<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02DiskGeniusPartitionTable.png" alt="磁盘分区"><br>我的电脑是用的UEFI启动方式,所以肯定会有ESP 和MSR 分区.在ESP分区中有一个EFI文件,里面有三个文件夹:</p>
<blockquote>
<p>/EFI/boot<br>  文件夹中有一个boot64.efi 文件,上面讲过UEFI启动方式就是通过去加载这些.efi文件来启动的.那这个efi是什么时候被加载,加载什么的?<br>  <strong>boot64.efi是UEFI的默认引导,他的引导是在你的系统引导之前的,所以不管你的电脑有没有装系统,装的什么系统,这个文件都会被UEFI先引导</strong></p>
</blockquote>
<p>  <strong>具体每个文件的含义,在无忧启动论坛有<a href="http://bbs.wuyou.net/forum.php?mod=viewthread&amp;action=printable&amp;tid=303679" target="_blank" rel="external">讨论</a></strong></p>
<p><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02BootDir.png" alt="Boot dir"></p>
<blockquote>
<p>/EFI/Microsoft/Boot<br>在Microsoft的Boot目录下有很多内容,包含了windows系统引导启动的所有信息，非常重要，文件夹是字体和语言部分，BCD包含了windows引导开始以后的信息（例如安装Hyper-v虚拟机和恢复还原之类的就会更新里面的信息）。bootmgfw.efi 是 Windows默认引导文件</p>
</blockquote>
<p><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02MicroBootDir.png" alt="Microsoft dir"></p>
<blockquote>
<p><span id="efi">/EFI/ubuntu</span><br>这个文件夹在没完成双系统安装前是不会出现的,我这边是安装好双系统后才截的图.这个文件夹下也有些.efi文件,那其中有一个肯定是用来引导Ubuntu的,这边就先不说是那个.等安装完我们可以用命令查看的~</p>
</blockquote>
<p><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02UbuntuBootDir.png" alt="ubuntu dir"></p>
<hr>
<p><strong>说了这么多,其实没有多大卵用,我们只需要知道以下几点就可以了</strong></p>
<ul>
<li><p>现在的电脑主板上用于引导启动的有两种固件了<code>BIOS</code> 和<code>UEFI</code></p>
<p><strong>BIOS启动流程</strong><br>  BIOS开机自检——》读取硬盘MBR分区的主引导记录—》控制权交给引导程序-》引导程序根据安装时候的配置读取各分区记录—》根据各分区已经有的系统情况，列出启动目录—》根据用户选择，启动选择的引导文件启动用户选择的系统。<br><strong>UEFI启动流程</strong><br>  主板上的UEFI模块—》硬盘内的第一个fat分区，如果分区内有EFI这个文件目录，就根据EFI文件目录的引导文件加载各类型的驱动和引导文件，启动系统同时完成自检。（如果第一个fat分区没有EFI目录则选择第二个，如果第一块硬盘没有，择选择第二块，或者U盘以此类推）</p>
</li>
<li><p>两种对磁盘的分区方式<code>MBR</code>和<code>GPT</code>,和启动方式搭配为MBR+BIOS, GPT+UEFI.</p>
</li>
</ul>
<p>准备的差不多了,我们就可以正式开始装双系统了</p>
<h2 id="磨刀不误砍柴功,正式开始装系统"><strong>磨刀不误砍柴功,正式开始装系统</strong></h2><p>开始装系统之前,还是有些工具需要准备:</p>
<ol>
<li>Ubuntu iso镜像文件,这个就是要安装的ubuntu系统了,<a href="http://www.ubuntu.com/download" target="_blank" rel="external">下载地址</a></li>
<li>一个8g 大小U盘</li>
<li>U盘启动盘制作工具<a href="http://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/" target="_blank" rel="external">Universal USB installer</a></li>
</ol>
<p>准备好了之后,我们就可以安装了:</p>
<ol>
<li>使用Universal USB installer 制作Ubuntu U盘启动盘<br>将U盘插入电脑,打开Universal USB installer<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02Universal%20USB%20Intaller.png" alt="USB INSTALLER"></li>
<li><span id="partition">创建Ubuntu分区</span><br>我们要给ubuntu单独分出一个分区<br>右键我的电脑-&gt;管理-&gt;磁盘管理-&gt;右键点击一个比较他的分区-&gt;压缩卷<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02shrink%20volume.jpg" alt="shrink volume"><br>如上图,给ubuntu分了120个G,记住这个大小,在安装ubuntu的时候会用到</li>
<li>关闭电脑的快速启动功能<br>控制面板-&gt;硬件和声音-&gt;电源选项-&gt;选择电源按钮和功能<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02quickstart1.png" alt="快速启动"><br>然后点击更改当前不可用的设置-&gt;把快速启动的对勾去了<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02quicksetup2.png" alt="关闭快速启动"></li>
<li>关闭<span id="secure">Secure Boot</span><br><a href="#secureboot">前面</a>介绍了,secure boot 能够防止恶意程序启动,保护电脑安全,但同时也不能让没有签名的系统启动,所以我们要安装多系统,首先得关闭secure boot,<br>重启电脑-&gt;按快捷键F2(不同机器不同按键,可以试试F2,F12,F8,DEL)进入EUFI设置界面-&gt;键盘左右箭头调到Security-&gt;上下箭头调到Secure boot-&gt;回车弹出选框选Disable<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02IMAG0008.jpg" alt="secure boot"></li>
<li><span id="5">选择U盘优先启动</span><br>关闭SecureBoot后,要安装ubuntu得让系统从U盘启动<br>左右箭头调到BOOT一栏-&gt;上下箭头调到EFI USB Device-&gt;F6 将这个启动项上调到第一位置.<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02IMAG0009.jpg" alt="u盘启动"></li>
<li>保存修改,重启<br>在exit一栏,选择第一项save discard and exit.保存修改并重启系统.</li>
<li>进入tryubuntu界面<br>重启后进入ubuntu 安装引导界面,选择地一个try ubuntu,我们把它称为ubuntu pe.<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02IMAG0010.jpg" alt="ubuntu 安装"></li>
<li>ubuntu分区<br>进入ubuntu pe界面后,点击桌面上的install ubuntu进行安装,一路next在select installation type的时候注意选择第三项Something Else<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02IMAG0013.jpg" alt="select"><br>然后,会看到磁盘列表里面有个free space大小和你在<a href="#partition">第2步</a>中分配的大小是一样的.选中他,点击左下的<code>+</code>号,创建分区.<br>一般来说我们只需要创建3个分区<br>第一个分区root,按照我这个选择就行了,大小一般给20G,也就是差不多20000M,类型:primary,新分区的位置:begining of the space ,use as:选择EXT4. 挂载点选择:/(也就是root啦)<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02IMAG0014.jpg" alt="root"><br>第二个分区swap,大小不小于你的内存大小,和root分区不同的是use as 选择为swap area.<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02IMAG0015.jpg" alt="swap"><br>第三个分区home,剩下的空间都作为home吧.和Root分区一样设置,只是挂载在home上<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02IMAG0016.jpg" alt="home"><br>之后,就一路next,等着装完吧</li>
<li>安装完成后拔下U盘,F2进入到UEFI设置界面,在boot一栏,可以看见多了一个ubuntu 启动选项,将他上调到第一</li>
<li>重启就进入到我们熟悉了GRUB引导界面了.默认第一项是进入ubuntu,然后还有windows boot manager 也就是win8系统.我们可以上下选择进入哪个系统.</li>
</ol>
<p><strong>至此ubuntu的安装就完成啦</strong></p>
<h2 id="事后诸葛,看看双系统的和谐共处">事后诸葛,看看双系统的和谐共处</h2><h3 id="UEFI启动选项">UEFI启动选项</h3><p><a href="#5">在第5步</a>中介绍把U盘设为第一启动项的时候,就看到其实这边我是已经安装好了ubuntu,现在系统的启动项包括EFI USB,ubuntu,Windows还有UEFI PXE Network 这几个启动项.在介绍ESP分区的时候看到了有几个<a href="#efi">efi</a>文件,这些文件和启动项是什么关系呢?<br>其实我们在ubuntu下有工具可以查看:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo efibootmgr -v</span><br></pre></td></tr></table></figure>
<p>这个命令可以查看当前系统所有的可用启动项<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog02efibootmgr.png" alt="efibootmgr"><br>可以看到现在我的系统包含编号为0001,0003,2003,0004,2001,2002的启动项,而且我当前使用的是0001也就是ubuntu启动啦.往下看,可以发现没法启动项的启动文件都列出来了<br>ubuntu -&gt; /EFI/ubuntu/shimx64.efi<br>win boot manager -&gt; /EFI/Microsoft/Boot/bootmgfw.efi<br>Lenovo recovery system -&gt;/EFI/Microsoft/Boot/LrsBootMgr.efi</p>
<blockquote>
<p>注:<br>对Ubuntu来说在<a href="#efi">这里</a>我们看到,boot文件夹下有grub64.efi 和Shimx64.efi ,而且我们进入系统也是直接进入的ubuntu的grub程序界面.那为什么不是启动grub64.efi,shimx64.efi是什么东西?<br>其实他家看<a href="#secure">这里</a>发现,我安装完双系统后是将Secure Boot打开的.前面也说了打开Secure boot 除了win8别的系统应该没法启动的,这就是shimx64.efi的作用了.<br>Typically, EFI/ubuntu/grubx64.efi on the EFI System Partition (ESP) is the GRUB binary, and EFI/ubuntu/shimx64.efi is the binary for shim. The latter is a relatively simple program that provides a way to boot on a computer with Secure Boot active. On such a computer, an unsigned version of GRUB won’t launch, and signing GRUB with Microsoft’s keys is impossible, so shim bridges the gap and adds its own security tools that parallel those of Secure Boot.<br>原来shimx64.fei是可以在sercure boot打开的情况下启动grub.</p>
</blockquote>
<h3 id="ubuntu下挂载Windows的分区盘"><strong>ubuntu下挂载Windows的分区盘</strong></h3><p>我安装完成后第一次进入Ubuntu,可以看到win下的磁盘分区,但是没法挂载,但当我进入一次Win系统后,再次进入ubuntu发现这些盘居然可以挂载了,那这样实现ubuntu和win的磁盘共享也不成问题了.</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p> <strong>前言</strong><br>上次在公司搭建好了博客，想着回家在win8上花几分钟搭建环境，当晚发第一篇，结果没想到习惯了linux后在win8上进行工作感觉寸步难行。所以干脆在家的电脑上也给装上了Ubuntu，今天记录下安装双系统的过程以及一些自己的总结。</p>
</blockquote>
<h2 id="让人烦躁却不得不知道的术语"><strong>让人烦躁却不得不知道的术语</strong></h2><p><strong>首先要明白,当我们按下电脑的开机键后,电脑在启动系统之前最先执行的一段程序是放在主板上的只读程序段名字叫Firmware,至于具体电脑的寄存器是怎么复位的,寄存器是怎么寻址到Firmware的,请看知乎大神的<a href="http://www.zhihu.com/question/22364502">回答</a>. 我们只需要知道有这段程序,并且在启动系统前会走这段路程就足够了. 目前有两种类型的Firmware,一种是我们以前经常听到的 BIOS(发音:/ˈbaɪ.ɒs/),,那还有一种就是近几年兴起的用来代替BIOS的UEFI发音(pronounced as an initialism U-E-F-I or like “unify” without the n[a])),当我们按下电脑开机键后,电脑厂商的LOGO出来的时候狂按(F2|F12|F9|del 具体各个厂商不一样,我的联想小新就是F2)键就能进入到Firmware控制界面(Firmware setup utility,),接下来我们就看下这两种Firmware</strong></p>
<h3 id="BIOS与UEFI">BIOS与UEFI</h3><p>BIOS的启动方式是通过读取执行硬盘第一个扇区的代码,之后通过这段代码定位并且执行别的代码.由于BIOS的空间限制并且BIOS只能执行16bit的代码,BIOS在使用中有很多限制.相反的,UEFI 通过加载硬盘ESP分区上的efi文件来启动系统,EFI 启动加载器程序可以利用EFI 启动服务来做很多事情,例如从硬盘读取文件.</p>
<h3 id="Secure_Boot"><span id="secureboot">Secure Boot</span></h3><p>Secure Boot只是UEFI的一个部分。两者的关系是局部与整体的关系。<br>Secure Boot的目的，是防止恶意软件侵入。它的做法就是采用密钥。UEFI规定，主板出厂的时候，可以内置一些可靠的公钥。然后，任何想要在这块主板上加载的操作系统或者硬件驱动程序，都必须通过这些公钥的认证。也就是说，这些软件必须用对应的私钥签署过，否则主板拒绝加载。由于恶意软件不可能通过认证，因此就没有办法感染Boot。<br>这个设想是好的。但是，UEFI没规定哪些公钥是可靠的，也没规定谁负责颁发这些公钥，都留给硬件厂商自己决定。<br>现在，微软就是要求，主板厂商内置Windows 8的公钥。</p>]]>
    
    </summary>
    
      <category term="BIOS" scheme="http://yoursite.com/tags/BIOS/"/>
    
      <category term="GPT" scheme="http://yoursite.com/tags/GPT/"/>
    
      <category term="MBR" scheme="http://yoursite.com/tags/MBR/"/>
    
      <category term="UEFI" scheme="http://yoursite.com/tags/UEFI/"/>
    
      <category term="双系统" scheme="http://yoursite.com/tags/%E5%8F%8C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ubuntu小巧好用的类似QQ截图的软件DeepinScrot]]></title>
    <link href="http://yoursite.com/2015/07/31/ubuntu%E5%B0%8F%E5%B7%A7%E5%A5%BD%E7%94%A8%E7%9A%84%E7%B1%BB%E4%BC%BCQQ%E6%88%AA%E5%9B%BE%E7%9A%84%E8%BD%AF%E4%BB%B6/"/>
    <id>http://yoursite.com/2015/07/31/ubuntu小巧好用的类似QQ截图的软件/</id>
    <published>2015-07-31T01:46:52.000Z</published>
    <updated>2015-08-04T06:40:50.000Z</updated>
    <content type="html"><![CDATA[<p>在Windows中当我们需要对一个图片进行复杂处理的时候，我们会选用adobe的ps软件，当我们需要快速的进行截图，然后进行简单的标记处理时，qq等类似软件提供的快速截图功能很好的满足了我们的需求。然而qq等类似软件在ubuntu中没有原生的支持，我们平常要进行截图时，就是按下PrintScreen快捷键。虽然也能达到截图目的，但总归来说没有QQ截图那么方便，任性。那今天这边介绍的一款软件可以在ubuntu中提供类似于QQ截图的功能。</p>
<a id="more"></a>
<p>软件的名字是： <strong>DeepinScrot</strong> ，Github 地址，<a href="https://github.com/linuxdeepin-packages/deepin-scrot" target="_blank" rel="external">点这里</a>.</p>
<p>通过下面的命令获取最新的安装包：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://packages.linuxdeepin.com/deepin/pool/main/d/deepin-scrot/deepin-scrot_2.<span class="number">0</span>-<span class="number">0</span>deepin_all.deb</span><br></pre></td></tr></table></figure>
<p>然后，进行安装：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i deepin-scrot_2.<span class="number">0</span>-<span class="number">0</span>deepin_all.deb</span><br></pre></td></tr></table></figure>
<p>之后就可以使用了：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deepin-scrot</span><br></pre></td></tr></table></figure>
<p>为了使用方便，我们为它设置快捷启动键：<br>打开systemsetting-&gt;keybord-&gt;shortcut<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog01DeepinScrotShortCut.png" alt="DeepinScrot"></p>
<blockquote>
<p>在custom shortcut 中新建一个项目，名字随便起。Command填  <code>deepin-scrot</code> 之后再给他个快捷键 <code>Ctrl+alt+A</code> </p>
</blockquote>
<p>看下效果，按下 <code>CTRL+ALT+A</code>:</p>
<p><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog01DeepinScrot.png" alt="DeepinScrot"> </p>
<p>很不错，几乎跟QQ截图一样，也提供了一些快速标记的功能。</p>
<p>感觉还不错~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Windows中当我们需要对一个图片进行复杂处理的时候，我们会选用adobe的ps软件，当我们需要快速的进行截图，然后进行简单的标记处理时，qq等类似软件提供的快速截图功能很好的满足了我们的需求。然而qq等类似软件在ubuntu中没有原生的支持，我们平常要进行截图时，就是按下PrintScreen快捷键。虽然也能达到截图目的，但总归来说没有QQ截图那么方便，任性。那今天这边介绍的一款软件可以在ubuntu中提供类似于QQ截图的功能。</p>]]>
    
    </summary>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="截图软件" scheme="http://yoursite.com/tags/%E6%88%AA%E5%9B%BE%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo+Ubuntu+GithubPages搭建个人博客(基础篇)]]></title>
    <link href="http://yoursite.com/2015/07/30/Ubuntu+Hexo+GithubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2015/07/30/Ubuntu+Hexo+GithubPages搭建静态博客/</id>
    <published>2015-07-30T03:25:44.000Z</published>
    <updated>2015-08-04T06:38:59.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><strong>前言</strong><br>最近发生了一些事情，不知道该怎么面对，想让自己忙起来，没有时间去想别的事情。同时，让我对过去进行了一个反思，以及对将来进行了初步的规划，我想改变，也一定会改变，借此博客，记录我成长的点点滴滴。希望我希望看到的人能看到，也希望能给大家带来点帮助。</p>
</blockquote>
<p>第一篇博客就用来记录下我搭建这个独立博客的经过吧</p>
<h2 id="准备"><strong>准备</strong></h2><h3 id="静态博客和动态博客"><strong>静态博客和动态博客</strong></h3><p>所谓静态博客，它是在写好文章后，在本地生成静态页面后再上传到服务器（Jekyll在Github Page上的例子有点特殊，后面会讲到），而不是像传统的Wordpress等基于动态语言、数据库博客那样在访问的时候从数据库读取数据动态生成页面。静态博客最大的优点是速度快，对网站使用的空间要求也不高，想找一个不支持静态页面的空间也是挺难的，缺点嘛，功能没有Wordpress等传统博客那么强。静态博客的”静态”主要体现在浏览者的角度，而不是写作者的角度，其最终的HTML文件，也是计算机生成的。静态博客与动态博客的差别就好像去超市里买一罐咖啡与去咖啡厅点一杯咖啡的差别。</p>
<p>在静态博客出现之前，更多的人选择的是传统的动态博客。传统的动态博客一般有2种常见的方法：</p>
<blockquote>
<ul>
<li>自建博客网站：需要了解数据库、HTML/CSS和PHP等很多Web编程知识</li>
<li>注册公共博客：一般要受制于公共博客服务提供商的博客创作工具的写作效率</li>
</ul>
</blockquote>
<p>实际上大部分博主写博客仅仅是个人性质的，文章数量不多，流量也不大，所以并不需要自己建站那么复杂。但如果注册公共博客，又会非常依赖服务提供商所提供的主题、功能和写作工具，缺少自由度。静态博客就可以很好的弥补两者的缺点。静态博客和传统博客最大的区别就在于写作与发布的过程有所不同。</p>
<p>静态博客首先会在本地进行离线写作，然后通过工具将离线本地作品转化为HTML网页发布到在线网站上<br>动态博客首先要建立网站（当然也可以注册一个公共博客服务），然后在线完成博客的编辑和发布<br>静态博客可以让博主更专注于写作，而不是花费很多精力在建站技术和写作工具上：</p>
<blockquote>
<ul>
<li>博主不需要折腾各种建站技术，任何支持静态网页的主机空间和云存储空间都可以拿来发布博客</li>
<li>博主可以自由选择自己喜欢的本地写作工具，而不需要受制于在线博客写作工具的质量火热用户体验</li>
</ul>
</blockquote>
<a id="more"></a>
<h3 id="GitHub_与_静态博客"><strong>GitHub 与 静态博客</strong></h3><p>静态博客是个新生事物。静态博客的流行跟著名的开源社区Github的支持是分不开的。因此，绝大部分静态博客平台设计得还是比较极客，更适合有一定编程技能的人来使用，并不适合完全零起点的完全没有编程知识的普通用户。而Github除提供在线Markdown编辑器之外，还提供了Github Page服务，可以将用户托管在Github上的Markdown博客发布为静态网站。博主完全可以将自己的博客站免费寄放在Github上。此外，通过Github发布博客，还有一个额外的好处，那就是你的博客文章可以用Git来管理，这样你就可以在Github上获得博客文章的完整发布历史（像程序员管理源代码一样），并且可以随时获取历史版本或回退和回退到特定的版本上，相当于有了强大的备份系统。</p>
<h3 id="Hexo"><strong>Hexo</strong></h3><p>hexo出自台湾大学生tommy351之手，是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。</p>
<p><strong>本着不花钱，爱折腾的原则，本人选择Hexo加上Git Pages 的方法搭建自己的独立博客</strong></p>
<h2 id="开始"><strong>开始</strong></h2><h3 id="Hexo环境安装"><strong>Hexo环境安装</strong></h3><blockquote>
<p>在Hexo的<a href="https://hexo.io/docs/" target="_blank" rel="external">官网</a>详细介绍了Hexo的安装和使用，安装Hexo的前提是需要先安装Node js和Git。</p>
</blockquote>
<h4 id="Ubuntu_安装NodeJS"><strong>Ubuntu 安装NodeJS</strong></h4><p>在ubuntu上安装Node.js也有很多方法，最常见的有两种：一种是通过Node.js的<a href="https://nodejs.org/" target="_blank" rel="external">官网</a>下载源码编译安装,另一种就是按照Hexo官网介绍的方法安装,这边以第二中方式为例.</p>
<ul>
<li>下载和安装nvm,nvm介绍<a href="http://weizhifeng.net/node-version-management-via-n-and-nvm.html" target="_blank" rel="external">请看</a>:</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这边可以使用curl也可以通过wget</span></span><br><span class="line">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br><span class="line"><span class="comment">#不过,我只有wget方法能成功</span></span><br><span class="line">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>
<ul>
<li>nvm安装好了之后,通过nvm安装node.js</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#0.12 为node.js版本,Current Version: v0.12.7</span></span><br><span class="line"><span class="variable">$nvm</span> isntall <span class="number">0.12</span></span><br></pre></td></tr></table></figure>
<p>至此Nodejs安装完毕,我们可以通过命令查看nodejs 版本</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wyq@wyq-m81 ~ $ node -v</span><br><span class="line">v0.<span class="number">10.25</span></span><br></pre></td></tr></table></figure>
<h4 id="Ubuntu安装Git"><strong>Ubuntu安装Git</strong></h4><p>在ubuntu中安装git还是相当简单的,直接使用包管理器进行安装就好:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> apt-get install git</span><br><span class="line"><span class="variable">$sudo</span> apt-get install git-core</span><br></pre></td></tr></table></figure>
<p><strong>Nodejs 和 git都已经安装好了,接下来就可安装我们的主角Hexo了</strong></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装过程有点慢,这个时候你可以问候一下GFW.</p>
<h3 id="Github_pages_仓库创建"><strong>Github pages 仓库创建</strong></h3><p>安装好Hexo后,就该另一个主角Github pages 登场了.关于Github pages的介绍,请看<a href="https://pages.github.com/" target="_blank" rel="external">这里</a>,它主要的作用是github给你或你的团队展示你的项目的地方,我们用这个来放我的博客简直再适合不过了.<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog00NewRepo.png" alt="new repo"><br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog00GithubIO.png" alt="new repo"></p>
<p>Github pages本质还是你github上的一个repository,只不过它的命名规则是[suername].github.io的形式,并且每个github只能有这么一个这样的仓库.创建好这样的仓库后就可以在浏览器地址栏输入[username].github.io进行访问了.</p>
<h2 id="执行"><strong>执行</strong></h2><blockquote>
<p>Hexo和Github pages 准备好以后,我们就可以正式开始博客建立了.</p>
</blockquote>
<h3 id="初始化本地博客目录"><strong>初始化本地博客目录</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在home新建一个文件夹,用于本地存放博客</span></span><br><span class="line"><span class="variable">$mkdir</span> Blogs</span><br><span class="line"><span class="variable">$cd</span> Blogs</span><br><span class="line"><span class="comment">#用hexo命令在Blogs目录中初始化环境</span></span><br><span class="line"><span class="variable">$hexo</span> init</span><br><span class="line"><span class="variable">$npm</span> install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个时候,其实Hexo为我们生成了一个默认的名为HelloWorld的一篇博客,接下来我们看下这篇博客</p>
</blockquote>
<h3 id="生成静态文件"><strong>生成静态文件</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用hexo generate命令可以将我们编写的markdown文件转换成html文件</span></span><br><span class="line"><span class="variable">$hexo</span> generate</span><br></pre></td></tr></table></figure>
<h3 id="本地服务开启"><strong>本地服务开启</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wyq@wyq-m81 ~/Blog $ hexo server</span><br><span class="line">INFO  Hexo is running at http://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">4000</span>/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个时候在浏览器地址栏输入localhost:4000就可看到Hexo为我们生成的这边博客了<br>大概就是这个样子(默认的标题和名字已经被我改掉啦)</p>
</blockquote>
<p><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog00HelloWorld.png" alt="默认HellowordPost"></p>
<blockquote>
<p>到此我们已经把基本建博客的流程走过一遍了,怎么样,是不是很easy呀.接下来我们完成三个事情:创建一个篇新的博客,给博客换个主题,上传到Github pages.</p>
</blockquote>
<h3 id="创建新的博客"><strong>创建新的博客</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用hexo new [postname]新建一篇博客</span></span><br><span class="line"><span class="variable">$hexo</span> new firstblog</span><br><span class="line"><span class="comment">#完成之后,进入到source/_psots目录就可以看到我们刚才新建的博客了</span></span><br><span class="line"><span class="variable">$cd</span> source/_posts</span><br><span class="line"><span class="variable">$ll</span></span><br><span class="line">drwxr-xr-x <span class="number">2</span> wyq wyq <span class="number">4096</span> Jul <span class="number">30</span> <span class="number">11</span>:<span class="number">25</span> .</span><br><span class="line">drwxr-xr-x <span class="number">3</span> wyq wyq <span class="number">4096</span> Jul <span class="number">29</span> <span class="number">16</span>:<span class="number">17</span> ..</span><br><span class="line">-rw-r--r-- <span class="number">1</span> wyq wyq   <span class="number">53</span> Jul <span class="number">30</span> <span class="number">11</span>:<span class="number">25</span> firstBlog.md</span><br><span class="line">-rw-r--r-- <span class="number">1</span> wyq wyq  <span class="number">852</span> Jul <span class="number">29</span> <span class="number">18</span>:<span class="number">04</span> HelloWorld.md</span><br><span class="line"><span class="comment">#firstBlog.md就是我们刚才新建的一篇博客</span></span><br></pre></td></tr></table></figure>
<p>博客文章都是md格式的markdown文件,我们打开来看下<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Hexo默认为我们生成了三行</span></span><br><span class="line">title: firstBlog <span class="comment">#这边博客的标题</span></span><br><span class="line">date: <span class="number">2015</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">11</span>:<span class="number">25</span>:<span class="number">44</span> <span class="comment">#博客创建时间</span></span><br><span class="line">tags: <span class="comment">#博客的tag</span></span><br></pre></td></tr></table></figure></p>
<p>那我们只需要使用markdown语法在这个文件里面写我们的博客就ok了,这里推荐在线markdwon编辑器,<a href="https://www.zybuluo.com" target="_blank" rel="external">CMD markdown</a>,至于markdown语法,我们只需要了解常用的就行了,学习成本几乎等于0,<a href="https://help.github.com/articles/markdown-basics/" target="_blank" rel="external">Github markdown语法</a></p>
<h3 id="更改博客主题"><strong>更改博客主题</strong></h3><p>Hexo 有丰富的主题支持,这也是我选择它的原因之一,在<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">这里</a>列出了所有的Hexo 主题,大家可以选择自己喜欢的使用.我这里以Yilia为例</p>
<p>在我们使用<code>hexo init</code> 初始化本地博客环境后,会看到如下的文件目录结构:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── scripts</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>
<p>这边先直介绍其中几个:</p>
<ul>
<li>_config.yml文件整个博客的配置文件,</li>
<li>source/_posts文件夹包含了当前整个博客的所有文章</li>
<li>themes 文件夹包含了当前的主题文件.</li>
</ul>
<p>我们要使用<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">Yilia</a>主题</p>
<ul>
<li>在当前目录(这里就是Blogs)中,clone Yilla 代码</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure>
<p>*更改_config.yml文件,在最后加入使用主题语句</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: yilia</span><br></pre></td></tr></table></figure>
<ul>
<li>进入到主题目录,编辑主题配置文件</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cd</span> themes/yilia</span><br><span class="line"><span class="variable">$vim</span> _congif.yml</span><br></pre></td></tr></table></figure>
<p>主题文件的配置说明</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># Header</span><br><span class="line">menu:</span><br><span class="line">  主页: /</span><br><span class="line">  所有文章: /archives</span><br><span class="line">  # 随笔: /tags/随笔</span><br><span class="line"></span><br><span class="line"># SubNav</span><br><span class="line">subnav:</span><br><span class="line">  github: "#"</span><br><span class="line">  weibo: "#"</span><br><span class="line">  rss: "#"</span><br><span class="line">  zhihu: "#"</span><br><span class="line">  #douban: "#"</span><br><span class="line">  #mail: "#"</span><br><span class="line">  #facebook: "#"</span><br><span class="line">  #google: "#"</span><br><span class="line">  #twitter: "#"</span><br><span class="line">  #linkedin: "#"</span><br><span class="line"></span><br><span class="line">rss: /atom.xml</span><br><span class="line"></span><br><span class="line"># Content</span><br><span class="line">excerpt_link: more</span><br><span class="line">fancybox: true</span><br><span class="line">mathjax: true</span><br><span class="line"></span><br><span class="line"># Miscellaneous</span><br><span class="line">google_analytics: ''</span><br><span class="line">favicon: /favicon.png</span><br><span class="line"></span><br><span class="line">#你的头像url</span><br><span class="line">avatar: ""</span><br><span class="line">#是否开启分享</span><br><span class="line">share: true</span><br><span class="line">#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key</span><br><span class="line">#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论</span><br><span class="line">duoshuo: true</span><br><span class="line">#是否开启云标签</span><br><span class="line">tagcloud: true</span><br><span class="line"></span><br><span class="line">#是否开启友情链接</span><br><span class="line">#不开启——</span><br><span class="line">#friends: false</span><br><span class="line">#开启——</span><br><span class="line">friends:</span><br><span class="line">  奥巴马的博客: http://localhost:4000/</span><br><span class="line">  卡卡的美丽传说: http://localhost:4000/</span><br><span class="line">  本泽马的博客: http://localhost:4000/</span><br><span class="line">  吉格斯的博客: http://localhost:4000/</span><br><span class="line">  习大大大不同: http://localhost:4000/</span><br><span class="line">  托蒂的博客: http://localhost:4000/</span><br><span class="line"></span><br><span class="line">#是否开启“关于我”。</span><br><span class="line">#不开启——</span><br><span class="line">#aboutme: false</span><br><span class="line">#开启——</span><br><span class="line">aboutme: 我是谁，我从哪里来，我到哪里去？我就是我，是颜色不一样的吃货…</span><br></pre></td></tr></table></figure>
<h3 id="生成静态文件,在本地预览"><strong>生成静态文件,在本地预览</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$hexo generate</span><br><span class="line">$hexo server</span><br></pre></td></tr></table></figure>
<p>效果如下<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog00UseYiliaTheme.png" alt="use yilia theme"></p>
<p>**ok,大功告成,就差把博客部署到github.io了</p>
<h2 id="将博客部署到github_pages中"><strong>将博客部署到github pages中</strong></h2><p>在博客配置文件_config.yml中,有个deployment一节,在这边我们进行github pages 的配置</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git <span class="comment">#注意,这边是git不是github,hexo 3.0以后就要求使用git,不然会出现deploy失败情况.</span></span><br><span class="line">  repo: https://github.com/YanceyWang/YanceyWang.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>配置好了之后,就可以吧我们博客deploy到github 上啦.</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> clean</span><br><span class="line"><span class="variable">$hexo</span> generate</span><br><span class="line"><span class="variable">$hexo</span> deploy</span><br></pre></td></tr></table></figure>
<p>之后,在地址栏输入[username.github.io] 就可以访问你的博客了.</p>
<h2 id="使用7牛图床"><strong>使用7牛图床</strong></h2><p>考虑到博客的速度，同时也为了便于博客的迁移，图床是必须的。我墙裂推荐七牛，访问速度极快，支持日志、防盗链和水印。</p>
<p>免费用户有每月10GB流量+总空间10GB+PUT/DELETE 10万次请求+GET 100万次请求，这对个人博客来说足够，不够的话点这个活动页面，也可通过邀请好友获得奖励，我也求一下七牛邀请。有一点要说明的是，七牛没有目录的概念，但是文件名可以包含/，比如2013/11/27/reading/photos-0.jpg，参考这里关于key-value存储系统。</p>
<ul>
<li><p><strong>首先要去7牛<a href="http://www.qiniu.com/" target="_blank" rel="external">官网</a>注册帐号,然后准备好身份证前后照,进行身份验证,不然很多功能无法使用.</strong><br>验证好了大概就是这个样子<br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog007niuIDvER.png" alt="身份验证"></p>
</li>
<li><p><strong>接着就可以创建空间了</strong><br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog00CreateRepo.png" alt="创建空间"></p>
</li>
<li><p><strong>然后进行图片上传,获取外连</strong><br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog007niuouterlink.png" alt="获取外连"></p>
</li>
<li><p><strong>还可以新建样式,给图片设置缩放,加水印等.</strong><br><img src="http://7xkr9a.com1.z0.glb.clouddn.com/Blog00CreateStyle.png" alt="新建样式"></p>
</li>
</ul>
<blockquote>
<p><strong>后记</strong><br>今天就写到这吧,本来昨天在公司已经配置的差不多了,以为回家能够轻车熟路的在windows上弄好环境,结果是我想多了.在ubuntu上用习惯了命令,在win上真是痛苦啊,想打开终端,<code>CTRL+ALT+T</code>,结果才发现是在win上,想看目录<code>ll</code>,结果提示没有这个命令..一气之下下载了Ubuntu 14.04 给PC装了双系统.<br>第一次写博客,肯定有很多不足之处,让大家见笑了,希望您提出您的宝贵意见,我会努力做的越来越好.<br>这篇文章只是Hexo搭博客的基础篇,可能会有进阶篇,会介绍域名购买,评论系统使用以及更多的一些优化.</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><strong>前言</strong><br>最近发生了一些事情，不知道该怎么面对，想让自己忙起来，没有时间去想别的事情。同时，让我对过去进行了一个反思，以及对将来进行了初步的规划，我想改变，也一定会改变，借此博客，记录我成长的点点滴滴。希望我希望看到的人能看到，也希望能给大家带来点帮助。</p>
</blockquote>
<p>第一篇博客就用来记录下我搭建这个独立博客的经过吧</p>
<h2 id="准备"><strong>准备</strong></h2><h3 id="静态博客和动态博客"><strong>静态博客和动态博客</strong></h3><p>所谓静态博客，它是在写好文章后，在本地生成静态页面后再上传到服务器（Jekyll在Github Page上的例子有点特殊，后面会讲到），而不是像传统的Wordpress等基于动态语言、数据库博客那样在访问的时候从数据库读取数据动态生成页面。静态博客最大的优点是速度快，对网站使用的空间要求也不高，想找一个不支持静态页面的空间也是挺难的，缺点嘛，功能没有Wordpress等传统博客那么强。静态博客的”静态”主要体现在浏览者的角度，而不是写作者的角度，其最终的HTML文件，也是计算机生成的。静态博客与动态博客的差别就好像去超市里买一罐咖啡与去咖啡厅点一杯咖啡的差别。</p>
<p>在静态博客出现之前，更多的人选择的是传统的动态博客。传统的动态博客一般有2种常见的方法：</p>
<blockquote>
<ul>
<li>自建博客网站：需要了解数据库、HTML/CSS和PHP等很多Web编程知识</li>
<li>注册公共博客：一般要受制于公共博客服务提供商的博客创作工具的写作效率</li>
</ul>
</blockquote>
<p>实际上大部分博主写博客仅仅是个人性质的，文章数量不多，流量也不大，所以并不需要自己建站那么复杂。但如果注册公共博客，又会非常依赖服务提供商所提供的主题、功能和写作工具，缺少自由度。静态博客就可以很好的弥补两者的缺点。静态博客和传统博客最大的区别就在于写作与发布的过程有所不同。</p>
<p>静态博客首先会在本地进行离线写作，然后通过工具将离线本地作品转化为HTML网页发布到在线网站上<br>动态博客首先要建立网站（当然也可以注册一个公共博客服务），然后在线完成博客的编辑和发布<br>静态博客可以让博主更专注于写作，而不是花费很多精力在建站技术和写作工具上：</p>
<blockquote>
<ul>
<li>博主不需要折腾各种建站技术，任何支持静态网页的主机空间和云存储空间都可以拿来发布博客</li>
<li>博主可以自由选择自己喜欢的本地写作工具，而不需要受制于在线博客写作工具的质量火热用户体验</li>
</ul>
</blockquote>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="搭建博客" scheme="http://yoursite.com/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>